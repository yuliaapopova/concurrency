// Code generated by MockGen. DO NOT EDIT.
// Source: app/compute/parser.go
//
// Generated by this command:
//
//	mockgen -source=app/compute/parser.go -destination=app/compute/mocks/mocks.go -package=mocks Repository
//

// Package mocks is a generated GoMock package.
package compute

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// QueryHandler mocks base method.
func (m *MockEngine) QueryHandler(ctx context.Context, query Query) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHandler", ctx, query)
	ret0, _ := ret[0].(string)
	return ret0
}

// QueryHandler indicates an expected call of QueryHandler.
func (mr *MockEngineMockRecorder) QueryHandler(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHandler", reflect.TypeOf((*MockEngine)(nil).QueryHandler), ctx, query)
}
