// Code generated by MockGen. DO NOT EDIT.
// Source: app/storage/wal/log_manager.go
//
// Generated by this command:
//
//	mockgen -source=app/storage/wal/log_manager.go -destination=app/storage/wal/log_manager_mocks.go -package=wal Segment
//

// Package wal is a generated GoMock package.
package wal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// LoadData mocks base method.
func (m *MockSegment) LoadData() ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadData indicates an expected call of LoadData.
func (mr *MockSegmentMockRecorder) LoadData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockSegment)(nil).LoadData))
}

// Write mocks base method.
func (m *MockSegment) Write(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockSegmentMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSegment)(nil).Write), arg0)
}
