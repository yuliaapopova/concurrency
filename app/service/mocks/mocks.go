// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/service.go
//
// Generated by this command:
//
//	mockgen -source=app/service/service.go -destination=app/service/mocks/mocks.go -package=mocks Repository Engine Config
//

// Package mocks is a generated GoMock package.
package mocks

import (
	compute "concurrency/app/compute"
	network "concurrency/app/network"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEngine) Delete(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, key)
}

// Delete indicates an expected call of Delete.
func (mr *MockEngineMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEngine)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockEngine) Get(ctx context.Context, key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockEngineMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEngine)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockEngine) Set(ctx context.Context, key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, key, value)
}

// Set indicates an expected call of Set.
func (mr *MockEngineMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockEngine)(nil).Set), ctx, key, value)
}

// MockCompute is a mock of Compute interface.
type MockCompute struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMockRecorder
}

// MockComputeMockRecorder is the mock recorder for MockCompute.
type MockComputeMockRecorder struct {
	mock *MockCompute
}

// NewMockCompute creates a new mock instance.
func NewMockCompute(ctrl *gomock.Controller) *MockCompute {
	mock := &MockCompute{ctrl: ctrl}
	mock.recorder = &MockComputeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompute) EXPECT() *MockComputeMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockCompute) Parse(ctx context.Context, query string) (compute.Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, query)
	ret0, _ := ret[0].(compute.Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockComputeMockRecorder) Parse(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockCompute)(nil).Parse), ctx, query)
}

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// HandleQueries mocks base method.
func (m *MockNetwork) HandleQueries(arg0 context.Context, arg1 func(context.Context, []byte) []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleQueries", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// HandleQueries indicates an expected call of HandleQueries.
func (mr *MockNetworkMockRecorder) HandleQueries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleQueries", reflect.TypeOf((*MockNetwork)(nil).HandleQueries), arg0, arg1)
}

// NewTCPServer mocks base method.
func (m *MockNetwork) NewTCPServer(arg0 string, arg1 *zap.Logger) (*network.TCPServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTCPServer", arg0, arg1)
	ret0, _ := ret[0].(*network.TCPServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTCPServer indicates an expected call of NewTCPServer.
func (mr *MockNetworkMockRecorder) NewTCPServer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTCPServer", reflect.TypeOf((*MockNetwork)(nil).NewTCPServer), arg0, arg1)
}
